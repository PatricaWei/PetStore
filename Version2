// PetChallenge_Wei_b.cpp 

// PetChallenge_Wei_a.cpp 

#include <iostream>
#include <string>
using namespace std;

class Pet
{
private:
   string name, type;
   long id;
   int numLimbs;

public:
   Pet();
   Pet(string name, string type, long id, int numLimbs);

   string getName();
   string getType();
   long getId();
   int getNumLimbs();

   bool setName(string str);
   bool setType(string str);
   bool setId(long num);
   bool setNumLimbs(int num);
   void setDefault();
   void setAll(string name, string type, long id, int numLimbs);

   static const string DEFAULT_NAME;
   static const string DEFAULT_TYPE;
   static const long DEFAULT_ID = 0;
   static const int DEFAULT_LIMBS = 4;
};

class PetStore
{
private:
   static const long STORE_SIZE = 5;
   //Pet petArray[STORE_SIZE];
   long size;
   Pet* petArray = new Pet[STORE_SIZE];


public:
   PetStore(long size);
   long getSize();
   Pet getPet(long idx);
   long search(long id);
};

string  const  Pet::DEFAULT_NAME = "undefined";
string  const  Pet::DEFAULT_TYPE = "undefined";

string makeACoolName(int length)
{
   string vowels = "aeiouy";
   string consonants = "bcdfghjklmnpqrstvwxz";

   string name = "";

   bool lastWasConsonant = (rand() > RAND_MAX / 2);

   for (int i = 0; i < length; i++)
   {
      if (lastWasConsonant)
      {
         name += vowels[rand() % vowels.length()];
      }
      else
      {
         name += consonants[rand() % consonants.length()];
      }
      lastWasConsonant = !lastWasConsonant;
   }
   return name;
}

int main()
{
   long myStoreSize = 3;
   int const MAX_NAME_LENGTH = 8;
   string typesOfPets[] = { "Dog", "Cat" };

   PetStore myPetArray(myStoreSize);

   // set the Pet Store

   for (int i = 0; i < myStoreSize; i++)
   {
      myPetArray.getPet(i).setName(makeACoolName(rand() % MAX_NAME_LENGTH + 2));
      // makeACoolName returned the right value, but when call getName()
      // the value still the default value: 
      cout << "Name: "  << "1 : " << myPetArray.getPet(i).getName() << endl;
      myPetArray.getPet(i).setType(typesOfPets[rand() % 2]);
      myPetArray.getPet(i).setId(i);
      myPetArray.getPet(i).setNumLimbs(myPetArray.getPet(i).DEFAULT_LIMBS);

      //cout << "  name: " << makeACoolName(rand() % MAX_NAME_LENGTH + 2) << endl;
   }


   /*
   for (int i = 0; i < myStoreSize; i++)
   {
      cout << "Name: " << myPetArray.getPet(i).getName() << endl
         << "Type: " << myPetArray.getPet(i).getType() << endl
         << "ID: " << myPetArray.getPet(i).getId() << endl
         << "Number of Limbs: " << myPetArray.getPet(i).getNumLimbs() << endl << endl;
   }
   */

}

Pet::Pet()
{
   setName(DEFAULT_NAME);
   setType(DEFAULT_TYPE);
   setId(DEFAULT_ID);
   setNumLimbs(DEFAULT_LIMBS);
}

Pet::Pet(string name, string type, long id, int numLimbs)
{
   if (!setName(name))
      setName(DEFAULT_NAME);
   if (!setType(type))
      setType(DEFAULT_TYPE);
   if (!setId(id))
      setId(DEFAULT_ID);
   if (!setNumLimbs(numLimbs))
      setNumLimbs(DEFAULT_LIMBS);
}

string Pet::getName()
{
   return this->name;
}

string Pet::getType()
{
   return type;
}

long Pet::getId()
{
   return id;
}

int Pet::getNumLimbs()
{
   return numLimbs;
}

bool Pet::setName(string str)
{
   cout << "name is to set: " << str << " ---- " << endl;

   this->name = str;  //valid str is generated by program, no need to check error.
   return true;
}

bool Pet::setType(string str)
{
   type = str; //valid str is generated by program, no need to check error.
   return true;
}

bool Pet::setId(long num)
{
   id = num;
   return true;
}

bool Pet::setNumLimbs(int num)
{
   if (num < 0)
      return false;
   else
   {
      numLimbs = num;
      return true;
   }
}


void Pet::setDefault()
{
   setName(DEFAULT_NAME);
   setType(DEFAULT_TYPE);
   setId(DEFAULT_ID);
   setNumLimbs(DEFAULT_LIMBS);
}
void Pet::setAll(string name, string type, long id, int numLimbs)
{
   if (!setName(name))
      setName(DEFAULT_NAME);
   if (!setType(type))
      setType(DEFAULT_TYPE);
   if (!setId(id))
      setId(DEFAULT_ID);
   if (!setNumLimbs(numLimbs))
      setNumLimbs(DEFAULT_LIMBS);

}

PetStore::PetStore(long size)
{
   if (size <= 0 || size > STORE_SIZE)
      size = STORE_SIZE;
   this->size = size;

   cout << "Store Size is: " << size << endl;


   for (int k = 0; k < size; k++)
   {
      petArray[k].setDefault();
   }
}

long PetStore::getSize()
{
   return size;
}


long PetStore::search(long id)
{
   long index = -1;

   //long storeActuralSize = this->size;

   for (int k = 0; k < size; k++)
      if (petArray[k].getId() == id)
         return k;

   return index;
}
